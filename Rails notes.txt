
C: rake moddleware 
Muestra todos los midlewares que se ejecutan cuando se procesa una peticion en rails
Casi toda la funcionalidad de controllers se ejecuta con  midlewares   

localhost del projecto http://localhost:3000/

lo bueno de  rails es que tiene generadores de codigo enlisto segun los valla usando 

rails g controller Main home
    -Genera un controlador con el nombre Main y una accion home

Luego de instalar la gema de devise instalamos la gema con el sig comando 
    rails generate devise:install
Creamos un model con la libreria de devise
    rails g devise User
Esto genera un modulo de autenticacion para este modelo User 
por default crea la tabla con campos predefinidos


    
    
==========================================

Como ya habia revisado haml es una gema que nos ayuda con la maquetacion in html 
donde solo se necita poner el inicio del objeto y t0odo lo que van dentro va identado (TABS)
es mas facil la escritura de html para evaluar codigo dentro del archivo se usan asi: 
El guion se usa para asignar una variable 
 - name = "miguel"
 el igual dentro de un objeto imprime el valor de la variable 
 #{name} //Este tambien funciona pero con el si se puede dentro de la misma linea me suena a string interpolation
 de esta forma tambien se imprime pero debe ser en una linea nueva (identada) si se pone la misma linea no funciona
  = "Name: " + name

Archivo application.css
*En este archivo se le indica que css se importaran require_tree importa to0do lo que esta en el folder es mas recomendable importar uno por uno funciona igual en js


Parciales:
son componentes que se usaran en diferentes partes del sitio por ejemplo
los parciales se identifican por iniciar con un guion bajo  se pueden importar con diferentes vistas



Despues de instalar la gema gem 'rspec-rails',"~>  3.5.0.beta1"  necesitamos correr despues un comando para ejecutar las pruebas
 comando rails generate rspec:install

 rails generate rspec:model User
 Crea el archivo de test para el modelo User

 Test Driven Development:
    *  Add a test
    *   Run all tests and see if the new one fails
    *   Write some code
    *   Run tests
    *   Refactor code
    *   Repeat





